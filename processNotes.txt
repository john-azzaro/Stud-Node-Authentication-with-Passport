Authentication with Passport Process Notes
==========================================

PHASE 0: Setup
===============
1. "npm init" to store dependencies
2. Install dependencies as needed
    * express   --  node application framework for building web apps
    * ejs       --  template engine
3. Add .gitignore file and exclude node_modules
4. Add development dependencies:
    * nodemon  -- restart server automatically
    * dotenv   -- allows enviroment variables to be stored in an dotenv file that can be loaded into server (like secret information)
5. Setup package.json to setup server in scripts.
    "devStart": "nodemon server.js"
    * test by running "npm run devStart"... you should see the following if it works:
    --------------------------------------------------------------------
    [nodemon] 1.19.2
    [nodemon] to restart at any time, enter `rs`
    [nodemon] watching dir(s): *.*
    [nodemon] starting `node server.js`
    [nodemon] clean exit - waiting for changes before restart
    --------------------------------------------------------------------



PHASE 1: Setup basic server functionality
=========================================
1. import express
    ----------------------------------
    const express = require('express');
    ----------------------------------
2. get app variable from express:
    ------------------------------------
    const app = express();
    ------------------------------------
3. Create app.listen to listen for client requests on port 3000 or any env stipulation.
    -------------------------------------------------------------------------------------
    app.listen(process.env.PORT || 3000, function() {
        console.log(`Your app is listening on ${process.env.PORT || 3000}...`);
    });
    -------------------------------------------------------------------------------------



PHASE 2: Setup basic routes
============================
    First, We need to make a home page that will be accessible to us when we are logged in.

    ---------------------------------------------
        app.get('/', function(req, res) {                  // Home page route (that you need to be logged into to get to)
            res.render('index.ejs');                       // The response will be to render a "index.ejs" page.
        });
    ---------------------------------------------



PHASE 3: Create a "views" folder
=================================
    1. First, create a "views" folder that will hold your pages.
    2. Second, create a "index.ejs" to render as a response to the user GET request.
    3. Third, in your index.ejs file, write a peice of test code and go to your localhost:3000 to see if everything is connected properly.



PHASE 4: Using ejs syntax
===========================
    4. To use ejs syntax, we need to tell the server to use ejs syntax (but remember to check and see if you installed the ejs dependency 
    in case it does not intially work).  Once this is doen you can use ejs in your templates.
    -------------------------------------------
        app.set('view-engine', 'ejs');
    -------------------------------------------

    -- To test the ejs system, you can try passing a object with a property comprised of a name and a value (i.e. Joe).
    ----------------------------------------------
        app.get('/', function(req, res) { 
            res.render('index.ejs', { name: 'joe'});        <== user object with the name joe.
        });

    ----------------------------------------------

    Then, in your index.ejs template render out the variable with " <%= %> " and the name in the middle (i.e. <%= name %>)
    -----------------------------------------
        <h1>Hello there <%= name %></h1>                  ==> Hello there Joe
    -----------------------------------------



PHASE 4: Setup the registration and login screens
=================================================
    1. First, create pages for login and registration screens
        * Create a view file named login.ejs
        * Create a view file named register.ejs
    2. Second, create your routes for the login and registration.
        For this step, you simply need to put in the code for rendering like we did for the home page but with the respective view.
    --------------------------------------------------
        app.get('/login', function (req, res) {
            res.render('login.ejs');
        });
        app.get('/register', function (req, res) {
            res.render('register.ejs');
        });
    --------------------------------------------------
    and you can test these routes with localhost:3000/login and localhost:3000/register.



PHASE 5: Create route and html for yourtRegistration page
==========================================================
    1. First, create your registration page:
        --------------------------------------------------
            <h1>Registration</h1>
            <form action="/register" method="POST">              <== here we are POSTing to a route with the name /register inside the server.
                ...
            </form>
        --------------------------------------------------


2. Then, since we are going to need a POST request to the server to /register, we need to create that route.
    ----------------------------------------------------
        app.post('/register', function(req, res) {

        });
    ----------------------------------------------------


3. Add in the html for your registration form
-----------------------------------------------
    <form action="/register" method="POST">
        <div>
            <label for="name">Name</label>
            <input type="text" id="name" name="name" placeholder="joe" required>              <== Remember, "Type" is the same as the for in the label,"name" is how we access on server, etc.
        </div>
        <div>
            <label for="email">Email</label>
            <input type="text" id="email" name="email" placeholder="joe@email.com" required>
        </div>
        <div>
            <label for="password">Password</label>
            <input type="text" id="password" name="password" placeholder="abc123" required>
        </div>
        <button type="submit">Submit</button>
    </form>
    -----------------------------------------------


4. Add an anchor tag to link to login after you register
    if everything is connected correctly, you will see that the login anchor tag leads to the login page.
    --------------------------------------------------
        <a href="/login">Login</a>
    --------------------------------------------------



PHASE 6: Create your Login page (identical to your registration page)
=====================================================================
    Same thing as the register, just change the register names to login and change the anchor tag to link back to the register page.
    ------------------------------------------------------
        <h1>Login</h1>
        <form action="/login" method="POST">
            <div>
                <label for="name">Name</label>
                <input type="text" id="name" name="name" placeholder="joe" required>
            </div>
            <div>
                <label for="email">Email</label>
                <input type="text" id="email" name="email" placeholder="joe@email.com" required>
            </div>
            <div>
                <label for="password">Password</label>
                <input type="text" id="password" name="password" placeholder="abc123" required>
            </div>
            <button type="submit">Login</button>
        </form>
        <a href="/register">Register</a>
    ------------------------------------------------------



PHASE 7: Add "urlencoded" to access input in requests
=======================================================
    Since information will be coming from forms, you need to use "urlencoded" and pass the option of "extended: false".  What this does is tell the application
    we want to take the email and password input and access them inside the request method in the POST method.
    --------------------------------------------
        app.use(express.urlencoded({ extended: false }));
    --------------------------------------------

    PHASE 8: Add local "users" storage
    ===================================
    ---------------------------------------------------
       const users = [];
    ---------------------------------------------------



PHASE 9: Load the bcrypt dependency to hash passwords.
======================================================
    bcyrpt will let you hash and salt passwords for comarison and safety in authentication.
    1. In your gitbash, simply install the npm module:
    ---------------------------
        npm install bcrypt
    ---------------------------

    2. next, require the bcrypt library in your server file.
    -----------------------------------------------
        const bcrypt = require('bcrypt'); 
    ----------------------------------------------- 



PHASE 8: Add the POST route for register
=========================================
    What this POST request will do is create a new user with a hashed password.  Remember that bcrypt is an asynchronous library, so you need to add async/await 
    modifiers to the function.
    ---------------------------------------------------------
        app.post('/register', async function(req, res) {                               // To create a user...
            try {                                                                      // create a try block to run our code...
                const hashedPassword = bcrypt.hash(req.body.password, 10);             // hash the password from the user input (i.e. the body of the form where password is) and the value of 10 (good default).
                users.push( {                                                          // Then we push this user to the local storage.
                    id:  Date.now().toString(),                                        // ... this is a uuid, but a database would do this by default.
                    name: req.body.name,                                               // ... this would get the name from the body of the form.
                    email: req.body.email,                                             // ... this would get the email from the body of the form.
                    password: hashedPassword                                           // ... this would get the password from the hashedPassword variable above.
                });         
                res.redirect('/login');                                                // and if everything works correctly, the response will be to redirect to the login page.                        
            } catch(err) {                                                             // If the try block fails, send an error.
                res.redirect('/register', );                                           // and respond by redirecting to the register page.
            }
        });
    ---------------------------------------------------------

    And if you want to check and see if your post method worked, simply log the "users" variable at the end of the function we are using for local storage to see your user, email and information.
    As an example, you should see this:
    ----------------------------------------------------------
        [ { id: '1569714335487',
            name: 'joe',
            email: 'joe@email.com',
            password: '$2b$10$./tzKUDOSIMdag7ZwFCw6uAJJd9AeCG9EU13FKSde5rTeO0Ox7QUm' } ]        <== hashed password
    ----------------------------------------------------------
    Also remember that since this is all done with local storage (i.e. not a database), this will reset so you need to re-enter the information.



PHASE 9: Install passport and associated dependencies for user login
=====================================================================
    While checking to see that the users name and passoword are the same is relatively easy, to persist that user across all the different requests they will make can be a bit tricky.
    To make things more streamlined, use Passport.js which is widely used for authentication.

    1. First, you want to install the passport dependency in gitbash:
    ------------------------------------------
        npm install passport passport-local
    ------------------------------------------
    passport will be used for authentication
    passport-local allows us to use user names and passwords for logging in as opposed to using google or something else.

    2. Additionally, in order to store and persist the user across different pages, you need to install express session.
    ----------------------------------------
        npm install express-session
    ----------------------------------------

    3. Also, we need a way to display messages if the login fails called express flash.
    This will be used by passport to show a neat popup for the errors.
    ----------------------------------------------
        npm install express-flash
    ----------------------------------------------

    4. To keep the server.js file tidy, create a passport-config.js
    All of your passport related information to passport.  Additionally, all of the information will be inside a function called initialize which we pass passport to.
    ------------------------------------------------------
        function initialize(passport) {
            ...
        }
    ------------------------------------------------------

    5. Require the passport-config function to use the information and call the function (and pass in the passport variable which needs to be added next)
    -----------------------------------------------------------
        const initializePassport = require('./passport-config')
        initializePassport(passport);
    -----------------------------------------------------------

    6. require the passport library in server.js
    -----------------------------------------------------
        const passport = require('passport');
    -----------------------------------------------------

    7. Then add the logic for initialize:
    --------------------------------------------------------------------------------------------------
        const LocalStrategy = require('passport-local').Strategy                          // to use the local version of passport, load passport-local as a strategy.
        const bcrypt = require('bcrypt')                                                  // take in bcrypt by requiring it in.



        function initialize(passport, getUserByEmail, getUserById) {
            const authenticateUser = async function(email, password, done) {              // Second, have authenticateUser with email and password passed in and then done when we are done authenticting the user. This is what is called from our email password to make sure the user is correct.
            const user =  getUserByEmail(email)                                           // 1. Get user by email or return null if there is no email (at this point the function has not been created yet but planning ahead)
            
            if(user === null) {                                                           // 2. Check to see if there is a user.
                return done(null, false, { message: "No user with that email found"});    // ... if there is no user, return "done()" and pass the error (in this case null bc no error only null) and return the user we found (i.e. no user so "false")
            }
            
            try {                                                                         // 3. Then you need to make sure the password matches the password provided with bcrypt with a try/catch block/
                if (await bcrypt.compare(password, user.password)) {                      // if (awaiting) bcrypt comparison of the password that the user sent in with the form.  If this is true, then we have an authenticated user.
                    return done(null, user);                                              // ... return done with no error and the user that we want to authenticate.
                }  else {                                                                 // if the passwords did NOT match...
                    return done(null, false, { message: 'password incorrect'});           // ... return done with no error and false (password did NOT match) and the message.
                }                                   
            } catch(err) {
                return done(err);
            }                                    
        }; 

            passport.use(new LocalStrategy({ usernameField: 'email' }, authenticateUser))    // First, use local strategy and pass user name field (i.e. email but it could be name or whatever) and the call to authenticate the user.
            passport.serializeUser(function(user, done) {                                    // Third, to serialize the user and store inside the session, call serializeUser take a function and pass user and done to store inside the session.
            passport.deserializeUser(function(id, done) {                                    // Fourth, deserialize outside session if needed.

            })
            });
        }

        module.exports = initialize;

    --------------------------------------------------------------------------------------------------

8. Then, you want to update the initializePassport by passing in a function that takes an email and finds an email equal to the email passed in
-------------------------------------------------------
    initializePassport(passport, email => users.find(user => user.email === email));   
-------------------------------------------------------



PHASE 10: Add use statements so the server knows how to use passport
=====================================================================
    first, we want to add flash, which is where we will get our messages for user login.
    to do this, of course you need to require it in:
    -------------------------------------------
        const flash = require("express-flash");  
    -------------------------------------------
    Then, you need to add session so the login can persist.  So, require in session:
    --------------------------------------------
        const session = require("express-session"); 
    --------------------------------------------
    Then, add the app.use functions:
    ------------------------------------------
        app.use(flash());
        app.use(session());
    ------------------------------------------

    For session, it takes a number of options.  In this case, we want to add a "secret", which is essentially a encryption method using an environment variable.
    This environment variable "SESSION_SECRET" will be put inside the environment variables file.  You will also need to add resave and saveUninitialized properties as well and
    set them to false since you dont want to save things that have not been changed.

    ---------------------------------------------------------
        app.use(session( {          
            secret: process.env.SESSION_SECRET,                    // the "secret" is a key that will encrypt all the information which is gotten from environment variables, of which "SESSION_SECRET" will be put inside .env file.
            resave: false,                                         // should we resave the session variables if nothing has changed (we dont so its false)
            saveUninitialized: false,                              // should you save an empty value in the session... we dont so its false. 
        }));
    ---------------------------------------------------------

    Now at this point, you need to load in your environment variables at the top of the server.js file.
    To do this, all you need to do is add an if statement that says that if we are in the procudtion environment, load the dotenv.
    -------------------------------------
        if (process.env.NODE_ENV !== 'production') {                // to load in environment variables, if we are in development
            require('dotenv').config();                             // require the dveelopment dependency and add config() to load in all the environment variables and set them in process.env(see app.use(session)).
    -------------------------------------


PHASE 11: Setup passport
========================
First, setup passport:
------------------------------------------------------
    app.use(passport.initialize());
------------------------------------------------------






